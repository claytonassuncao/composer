__import__('pysqlite3')
import sys
sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')

import os
import streamlit as st
from crewai import Agent, Task, Crew, Process, LLM
import json

# Configurando o modelo usando a classe LLM nativa do CrewAI
gpt4o = 'gpt-4o'

llm = LLM(
    model="gpt-4",
    temperature=0.8
)

# Fun√ß√£o para configurar o agente e executar a composi√ß√£o
def criar_musica(sentimentos):
    # Definindo o agente
    agent_escritor = Agent(
        role="Compositor de M√∫sica Crist√£",
        goal="Escreva uma m√∫sica crist√£ que exalte o nome de Cristo Jesus, expressando os seguintes sentimentos: {sentimentos}.",
        verbose=True,
        memory=True,
        llm=llm,
        backstory="""
            Desde jovem, voc√™ sentiu um profundo chamado para expressar sua f√© e espiritualidade atrav√©s da m√∫sica.
            Inspirado pelos salmos, hinos e c√¢nticos que ecoam a ess√™ncia da adora√ß√£o, voc√™ dedica sua vida a compor
            melodias que tocam os cora√ß√µes e elevam as almas. Seu conhecimento teol√≥gico, combinado com uma habilidade
            natural para traduzir emo√ß√µes em m√∫sica, torna cada composi√ß√£o uma experi√™ncia √∫nica e transformadora.
            Voc√™ acredita que a m√∫sica √© uma forma de ora√ß√£o e comunh√£o com Deus, e v√™ suas composi√ß√µes como uma ferramenta
            para ajudar pessoas a se conectarem espiritualmente e encontrarem paz em meio aos desafios da vida.
            Trabalhando com letras profundas e melodias inspiradoras, voc√™ busca criar can√ß√µes que ressoem em congrega√ß√µes
            e momentos pessoais de devo√ß√£o, iluminando o caminho da f√© para aqueles que ouvem sua arte.
        """
    )

    # Definindo a tarefa
    tarefa_composicao = Task(
        description="""
            Crie uma m√∫sica crist√£ inspiradora centrada em um tema espec√≠fico de adora√ß√£o, como amor divino, gra√ßa, ou
            renova√ß√£o espiritual. A composi√ß√£o deve ser adequada tanto para congrega√ß√µes quanto para momentos de ora√ß√£o
            individual. A letra deve ser profundamente tocante, teologicamente fundamentada e a melodia deve ser f√°cil
            de cantar e memor√°vel.
            
            Especifica√ß√µes:
            - Estilo musical: Contempor√¢neo, com influ√™ncias de worship e hinos cl√°ssicos.
            - Estrutura: Inclua versos, refr√£o e uma ponte.
            - Tom emocional: Esperan√ßoso, reconfortante e espiritual.
            - Mensagem central: Transmitir uma mensagem clara e positiva, como gratid√£o, confian√ßa em Deus ou celebra√ß√£o da f√©.
            - Elementos teol√≥gicos: Incorporar passagens b√≠blicas.
        """,
        expected_output="""
            - A letra completa da m√∫sica, formatada em versos e refr√£o, devidamente formatada.
            - Sugest√£o da melodia b√°sica em nota√ß√£o musical simples e uma descri√ß√£o do ritmo e tom, devidamente formatada.
            - Sugest√£o de cifras para acompanhamento instrumental, devidamente formatada.
            - Breve descri√ß√£o da inten√ß√£o por tr√°s da m√∫sica e do impacto que ela busca causar nos ouvintes.
            
            O texto formatado deve seguir as seguintes regras:
  			1. T√≠tulos e subt√≠tulos devem estar em negrito, utilizando markdown. Exemplo: `**T√≠tulo da M√∫sica:**`.
  			2. O conte√∫do ap√≥s os t√≠tulos deve manter espa√ßamento adequado e alinhamento claro.
  			3. Listas devem ser utilizadas para itens estruturados, como informa√ß√µes t√©cnicas ou descri√ß√µes.
  			4. Preserve a estrutura do texto original, incluindo versos, refr√µes e outros elementos musicais.
  			5. O resultado deve ser apresentado em formato markdown para f√°cil leitura e exporta√ß√£o.
            6. Fontes dos textos de tamanho 14 ou 16 para facilitar a leitura.
        """,
        agent=agent_escritor
    )

    # Criando a tripula√ß√£o
    equipe = Crew(
        agents=[agent_escritor],
        tasks=[tarefa_composicao],
        process=Process.sequential
    )

    # Executando a tripula√ß√£o
    result = equipe.kickoff(inputs={"sentimentos": sentimentos})

    return result

# Interface do Streamlit
st.title("Compositor de M√∫sica Crist√£ üéµ")
st.write("Crie m√∫sicas crist√£s inspiradoras com base nos sentimentos desejados.")

# Entrada do usu√°rio
sentimentos = st.text_input(
    "Digite os sentimentos que deseja incluir na m√∫sica (ex.: gratid√£o, esperan√ßa, perd√£o):",
    "gratid√£o, esperan√ßa, perd√£o"
)

# Bot√£o para gerar a m√∫sica
if st.button("Gerar M√∫sica"):
    with st.spinner("Compondo a m√∫sica..."):
        try:
            resultado = criar_musica(sentimentos)

            st.success("M√∫sica composta com sucesso!")

            # Processar e exibir o texto formatado
            st.markdown("### Letra da M√∫sica:")
            if isinstance(resultado, str):
                try:
                    # Tenta converter para JSON e extrair o campo `raw`
                    resultado_json = json.loads(resultado)
                    texto_formatado = resultado_json.get("raw", resultado)
                except json.JSONDecodeError:
                    # Caso n√£o seja JSON, trata como texto normal
                    texto_formatado = resultado
            elif isinstance(resultado, dict):
                texto_formatado = resultado.get("raw", str(resultado))
            else:
                texto_formatado = str(resultado)

            # Exibir o texto formatado diretamente
            st.markdown(texto_formatado)

        except Exception as e:
            st.error("Ocorreu um erro ao compor a m√∫sica.")
            st.write(str(e))
